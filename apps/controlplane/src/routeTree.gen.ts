/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedProfileImport } from './routes/_authed/profile'
import { Route as AuthedDashboardIndexImport } from './routes/_authed/dashboard/index'
import { Route as AuthedDashboardNewImport } from './routes/_authed/dashboard/new'
import { Route as AuthedDashboardProjectProjectIdIndexImport } from './routes/_authed/dashboard/project/$projectId/index'
import { Route as AuthedDashboardProjectProjectIdSettingsImport } from './routes/_authed/dashboard/project/$projectId/settings'
import { Route as AuthedDashboardProjectProjectIdDeploymentIdImport } from './routes/_authed/dashboard/project/$projectId/$deploymentId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedProfileRoute = AuthedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedDashboardIndexRoute = AuthedDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedDashboardNewRoute = AuthedDashboardNewImport.update({
  id: '/dashboard/new',
  path: '/dashboard/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedDashboardProjectProjectIdIndexRoute =
  AuthedDashboardProjectProjectIdIndexImport.update({
    id: '/dashboard/project/$projectId/',
    path: '/dashboard/project/$projectId/',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedDashboardProjectProjectIdSettingsRoute =
  AuthedDashboardProjectProjectIdSettingsImport.update({
    id: '/dashboard/project/$projectId/settings',
    path: '/dashboard/project/$projectId/settings',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedDashboardProjectProjectIdDeploymentIdRoute =
  AuthedDashboardProjectProjectIdDeploymentIdImport.update({
    id: '/dashboard/project/$projectId/$deploymentId',
    path: '/dashboard/project/$projectId/$deploymentId',
    getParentRoute: () => AuthedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authed/profile': {
      id: '/_authed/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthedProfileImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard/new': {
      id: '/_authed/dashboard/new'
      path: '/dashboard/new'
      fullPath: '/dashboard/new'
      preLoaderRoute: typeof AuthedDashboardNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard/': {
      id: '/_authed/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard/project/$projectId/$deploymentId': {
      id: '/_authed/dashboard/project/$projectId/$deploymentId'
      path: '/dashboard/project/$projectId/$deploymentId'
      fullPath: '/dashboard/project/$projectId/$deploymentId'
      preLoaderRoute: typeof AuthedDashboardProjectProjectIdDeploymentIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard/project/$projectId/settings': {
      id: '/_authed/dashboard/project/$projectId/settings'
      path: '/dashboard/project/$projectId/settings'
      fullPath: '/dashboard/project/$projectId/settings'
      preLoaderRoute: typeof AuthedDashboardProjectProjectIdSettingsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard/project/$projectId/': {
      id: '/_authed/dashboard/project/$projectId/'
      path: '/dashboard/project/$projectId'
      fullPath: '/dashboard/project/$projectId'
      preLoaderRoute: typeof AuthedDashboardProjectProjectIdIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedProfileRoute: typeof AuthedProfileRoute
  AuthedDashboardNewRoute: typeof AuthedDashboardNewRoute
  AuthedDashboardIndexRoute: typeof AuthedDashboardIndexRoute
  AuthedDashboardProjectProjectIdDeploymentIdRoute: typeof AuthedDashboardProjectProjectIdDeploymentIdRoute
  AuthedDashboardProjectProjectIdSettingsRoute: typeof AuthedDashboardProjectProjectIdSettingsRoute
  AuthedDashboardProjectProjectIdIndexRoute: typeof AuthedDashboardProjectProjectIdIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedProfileRoute: AuthedProfileRoute,
  AuthedDashboardNewRoute: AuthedDashboardNewRoute,
  AuthedDashboardIndexRoute: AuthedDashboardIndexRoute,
  AuthedDashboardProjectProjectIdDeploymentIdRoute:
    AuthedDashboardProjectProjectIdDeploymentIdRoute,
  AuthedDashboardProjectProjectIdSettingsRoute:
    AuthedDashboardProjectProjectIdSettingsRoute,
  AuthedDashboardProjectProjectIdIndexRoute:
    AuthedDashboardProjectProjectIdIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/profile': typeof AuthedProfileRoute
  '/dashboard/new': typeof AuthedDashboardNewRoute
  '/dashboard': typeof AuthedDashboardIndexRoute
  '/dashboard/project/$projectId/$deploymentId': typeof AuthedDashboardProjectProjectIdDeploymentIdRoute
  '/dashboard/project/$projectId/settings': typeof AuthedDashboardProjectProjectIdSettingsRoute
  '/dashboard/project/$projectId': typeof AuthedDashboardProjectProjectIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/profile': typeof AuthedProfileRoute
  '/dashboard/new': typeof AuthedDashboardNewRoute
  '/dashboard': typeof AuthedDashboardIndexRoute
  '/dashboard/project/$projectId/$deploymentId': typeof AuthedDashboardProjectProjectIdDeploymentIdRoute
  '/dashboard/project/$projectId/settings': typeof AuthedDashboardProjectProjectIdSettingsRoute
  '/dashboard/project/$projectId': typeof AuthedDashboardProjectProjectIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/_authed/profile': typeof AuthedProfileRoute
  '/_authed/dashboard/new': typeof AuthedDashboardNewRoute
  '/_authed/dashboard/': typeof AuthedDashboardIndexRoute
  '/_authed/dashboard/project/$projectId/$deploymentId': typeof AuthedDashboardProjectProjectIdDeploymentIdRoute
  '/_authed/dashboard/project/$projectId/settings': typeof AuthedDashboardProjectProjectIdSettingsRoute
  '/_authed/dashboard/project/$projectId/': typeof AuthedDashboardProjectProjectIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/profile'
    | '/dashboard/new'
    | '/dashboard'
    | '/dashboard/project/$projectId/$deploymentId'
    | '/dashboard/project/$projectId/settings'
    | '/dashboard/project/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/profile'
    | '/dashboard/new'
    | '/dashboard'
    | '/dashboard/project/$projectId/$deploymentId'
    | '/dashboard/project/$projectId/settings'
    | '/dashboard/project/$projectId'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/about'
    | '/login'
    | '/_authed/profile'
    | '/_authed/dashboard/new'
    | '/_authed/dashboard/'
    | '/_authed/dashboard/project/$projectId/$deploymentId'
    | '/_authed/dashboard/project/$projectId/settings'
    | '/_authed/dashboard/project/$projectId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/about",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/profile",
        "/_authed/dashboard/new",
        "/_authed/dashboard/",
        "/_authed/dashboard/project/$projectId/$deploymentId",
        "/_authed/dashboard/project/$projectId/settings",
        "/_authed/dashboard/project/$projectId/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authed/profile": {
      "filePath": "_authed/profile.tsx",
      "parent": "/_authed"
    },
    "/_authed/dashboard/new": {
      "filePath": "_authed/dashboard/new.tsx",
      "parent": "/_authed"
    },
    "/_authed/dashboard/": {
      "filePath": "_authed/dashboard/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/dashboard/project/$projectId/$deploymentId": {
      "filePath": "_authed/dashboard/project/$projectId/$deploymentId.tsx",
      "parent": "/_authed"
    },
    "/_authed/dashboard/project/$projectId/settings": {
      "filePath": "_authed/dashboard/project/$projectId/settings.tsx",
      "parent": "/_authed"
    },
    "/_authed/dashboard/project/$projectId/": {
      "filePath": "_authed/dashboard/project/$projectId/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
